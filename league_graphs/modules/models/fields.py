# -*- coding: utf-8 -*-
from psycopg2 import sql
from typing import Any
import logging

logger = logging.getLogger(__name__)


class Field(object):
    _pg_type: str

    def __init__(self, required : bool = False):
        self.required = required

    def get_creation_query(self, name : str) -> sql.SQL:
        """Construct ADD COLUMN query section for this column"""
        query = sql.SQL("ADD COLUMN IF NOT EXISTS {name} {pg_type}").format(
            name=sql.Identifier(name),
            pg_type=sql.SQL(self._pg_type),
        )
        if self.required:
            query += sql.SQL(" NOT NULL")
        return query

    def value_to_column(self, value : Any) -> None:
        """Convert the given value into a valid database insert/update value.
        Raise an error if the method is ever called for Field."""
        raise NotImplementedError("Method value_to_column is not implemented on the base class Field")

    def get_default(self) -> None:
        """Get default value for this field type"""
        raise NotImplementedError("Method get_default is not implemented on the base class Field")


class String(Field):
    _pg_type = "varchar"

    def value_to_column(self, value : Any) -> str | None:
        """Convert the given value into a string for database insert/update"""
        return str(value) if value else None

    def get_default(self) -> str:
        """Get default value for this field type"""
        return ""


class Integer(Field):
    _pg_type = "integer"

    def value_to_column(self, value : Any) -> int:
        """Convert the given value into an integer for database insert/update"""
        return int(value or 0)

    def get_default(self) -> int:
        """Get default value for this field type"""
        return 0


class Float(Field):
    _pg_type = "numeric"

    def value_to_column(self, value : Any) -> float:
        """Convert the given value into a float for database insert/update"""
        return float(value or 0)

    def get_default(self) -> float:
        """Get default value for this field type"""
        return 0.0


class Boolean(Field):
    _pg_type = "bool"

    def value_to_column(self, value : Any) -> bool:
        """Convert the given value into a boolean for database insert/update"""
        return bool(value)

    def get_default(self) -> bool:
        """Get default value for this field type"""
        return False


class ID(Integer):
    def get_creation_query(self, name : str) -> str:
        """Construct ADD COLUMN query section for this column"""
        res = super().get_creation_query(name)
        return res + sql.SQL(" PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY")
